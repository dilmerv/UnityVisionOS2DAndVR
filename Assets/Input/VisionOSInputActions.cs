//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Input/VisionOSInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @VisionOSInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @VisionOSInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""VisionOSInputActions"",
    ""maps"": [
        {
            ""name"": ""VisionPro2D"",
            ""id"": ""e84e7689-65a7-4623-9231-4ab8b3f0dcd4"",
            ""actions"": [
                {
                    ""name"": ""TouchTap"",
                    ""type"": ""Button"",
                    ""id"": ""51a0df12-69a9-413d-9a0e-e11a883349b0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TouchPosition"",
                    ""type"": ""Value"",
                    ""id"": ""7d48fea7-f8f5-470b-a706-170ee1770dae"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b546b02d-e053-40fc-9626-bc794fee822f"",
                    ""path"": ""<Touchscreen>/primaryTouch/tap"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TouchTap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""55299870-9d5b-4a62-83e0-7d029222817c"",
                    ""path"": ""<Touchscreen>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TouchPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""VisionProVR"",
            ""id"": ""80dbebf7-f35f-460a-96fb-e43f23424b9f"",
            ""actions"": [
                {
                    ""name"": ""LeftHandPosition"",
                    ""type"": ""Value"",
                    ""id"": ""789ae4e1-ddb3-47d9-b0af-0f0ee6bcbf57"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""LeftHandRotation"",
                    ""type"": ""Value"",
                    ""id"": ""e81567f2-f736-4cd6-9c4f-fd75f3061417"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RightHandPosition"",
                    ""type"": ""Value"",
                    ""id"": ""345373c8-6f06-4320-b35d-a7a24ab1d91c"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RightHandRotation"",
                    ""type"": ""Value"",
                    ""id"": ""e0525703-a8f7-4a64-a294-06273ba2466a"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""PrimarySpatialPointer"",
                    ""type"": ""Value"",
                    ""id"": ""e1bad259-e6ae-4b00-963e-694c0d200f71"",
                    ""expectedControlType"": ""VisionOSSpatialPointer"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""FirstSpatialPointer"",
                    ""type"": ""Value"",
                    ""id"": ""d04f5c5b-7d5d-44e7-99d8-3ab1a3ac501d"",
                    ""expectedControlType"": ""VisionOSSpatialPointer"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""SecondSpatialPointer"",
                    ""type"": ""Value"",
                    ""id"": ""5f8460cc-ebd1-4a54-b73e-a73c9e70b004"",
                    ""expectedControlType"": ""VisionOSSpatialPointer"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""d690de77-008e-4e70-909e-94d60ae4bf18"",
                    ""path"": ""<XRHandDevice>{LeftHand}/devicePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftHandPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""77e124d1-6c74-4c6e-aac2-943859d248b6"",
                    ""path"": ""<XRHandDevice>{LeftHand}/deviceRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftHandRotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""caa752a8-9cbf-4282-978e-ea7ff6279312"",
                    ""path"": ""<XRHandDevice>{RightHand}/deviceRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightHandRotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""df1b3b90-a118-4825-ab0d-c286d199314a"",
                    ""path"": ""<XRHandDevice>{RightHand}/devicePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightHandPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""150f3124-39f3-436d-8889-5894a5a434ab"",
                    ""path"": ""<VisionOSSpatialPointerDevice>/primarySpatialPointer"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PrimarySpatialPointer"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""728d4644-dace-477a-b385-165e73d4d59b"",
                    ""path"": ""<VisionOSSpatialPointerDevice>/spatialPointer0"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FirstSpatialPointer"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8c0d6b52-0a0b-4e49-8443-73b14a0b791c"",
                    ""path"": ""<VisionOSSpatialPointerDevice>/spatialPointer1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SecondSpatialPointer"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // VisionPro2D
        m_VisionPro2D = asset.FindActionMap("VisionPro2D", throwIfNotFound: true);
        m_VisionPro2D_TouchTap = m_VisionPro2D.FindAction("TouchTap", throwIfNotFound: true);
        m_VisionPro2D_TouchPosition = m_VisionPro2D.FindAction("TouchPosition", throwIfNotFound: true);
        // VisionProVR
        m_VisionProVR = asset.FindActionMap("VisionProVR", throwIfNotFound: true);
        m_VisionProVR_LeftHandPosition = m_VisionProVR.FindAction("LeftHandPosition", throwIfNotFound: true);
        m_VisionProVR_LeftHandRotation = m_VisionProVR.FindAction("LeftHandRotation", throwIfNotFound: true);
        m_VisionProVR_RightHandPosition = m_VisionProVR.FindAction("RightHandPosition", throwIfNotFound: true);
        m_VisionProVR_RightHandRotation = m_VisionProVR.FindAction("RightHandRotation", throwIfNotFound: true);
        m_VisionProVR_PrimarySpatialPointer = m_VisionProVR.FindAction("PrimarySpatialPointer", throwIfNotFound: true);
        m_VisionProVR_FirstSpatialPointer = m_VisionProVR.FindAction("FirstSpatialPointer", throwIfNotFound: true);
        m_VisionProVR_SecondSpatialPointer = m_VisionProVR.FindAction("SecondSpatialPointer", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // VisionPro2D
    private readonly InputActionMap m_VisionPro2D;
    private List<IVisionPro2DActions> m_VisionPro2DActionsCallbackInterfaces = new List<IVisionPro2DActions>();
    private readonly InputAction m_VisionPro2D_TouchTap;
    private readonly InputAction m_VisionPro2D_TouchPosition;
    public struct VisionPro2DActions
    {
        private @VisionOSInputActions m_Wrapper;
        public VisionPro2DActions(@VisionOSInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @TouchTap => m_Wrapper.m_VisionPro2D_TouchTap;
        public InputAction @TouchPosition => m_Wrapper.m_VisionPro2D_TouchPosition;
        public InputActionMap Get() { return m_Wrapper.m_VisionPro2D; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(VisionPro2DActions set) { return set.Get(); }
        public void AddCallbacks(IVisionPro2DActions instance)
        {
            if (instance == null || m_Wrapper.m_VisionPro2DActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_VisionPro2DActionsCallbackInterfaces.Add(instance);
            @TouchTap.started += instance.OnTouchTap;
            @TouchTap.performed += instance.OnTouchTap;
            @TouchTap.canceled += instance.OnTouchTap;
            @TouchPosition.started += instance.OnTouchPosition;
            @TouchPosition.performed += instance.OnTouchPosition;
            @TouchPosition.canceled += instance.OnTouchPosition;
        }

        private void UnregisterCallbacks(IVisionPro2DActions instance)
        {
            @TouchTap.started -= instance.OnTouchTap;
            @TouchTap.performed -= instance.OnTouchTap;
            @TouchTap.canceled -= instance.OnTouchTap;
            @TouchPosition.started -= instance.OnTouchPosition;
            @TouchPosition.performed -= instance.OnTouchPosition;
            @TouchPosition.canceled -= instance.OnTouchPosition;
        }

        public void RemoveCallbacks(IVisionPro2DActions instance)
        {
            if (m_Wrapper.m_VisionPro2DActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IVisionPro2DActions instance)
        {
            foreach (var item in m_Wrapper.m_VisionPro2DActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_VisionPro2DActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public VisionPro2DActions @VisionPro2D => new VisionPro2DActions(this);

    // VisionProVR
    private readonly InputActionMap m_VisionProVR;
    private List<IVisionProVRActions> m_VisionProVRActionsCallbackInterfaces = new List<IVisionProVRActions>();
    private readonly InputAction m_VisionProVR_LeftHandPosition;
    private readonly InputAction m_VisionProVR_LeftHandRotation;
    private readonly InputAction m_VisionProVR_RightHandPosition;
    private readonly InputAction m_VisionProVR_RightHandRotation;
    private readonly InputAction m_VisionProVR_PrimarySpatialPointer;
    private readonly InputAction m_VisionProVR_FirstSpatialPointer;
    private readonly InputAction m_VisionProVR_SecondSpatialPointer;
    public struct VisionProVRActions
    {
        private @VisionOSInputActions m_Wrapper;
        public VisionProVRActions(@VisionOSInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @LeftHandPosition => m_Wrapper.m_VisionProVR_LeftHandPosition;
        public InputAction @LeftHandRotation => m_Wrapper.m_VisionProVR_LeftHandRotation;
        public InputAction @RightHandPosition => m_Wrapper.m_VisionProVR_RightHandPosition;
        public InputAction @RightHandRotation => m_Wrapper.m_VisionProVR_RightHandRotation;
        public InputAction @PrimarySpatialPointer => m_Wrapper.m_VisionProVR_PrimarySpatialPointer;
        public InputAction @FirstSpatialPointer => m_Wrapper.m_VisionProVR_FirstSpatialPointer;
        public InputAction @SecondSpatialPointer => m_Wrapper.m_VisionProVR_SecondSpatialPointer;
        public InputActionMap Get() { return m_Wrapper.m_VisionProVR; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(VisionProVRActions set) { return set.Get(); }
        public void AddCallbacks(IVisionProVRActions instance)
        {
            if (instance == null || m_Wrapper.m_VisionProVRActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_VisionProVRActionsCallbackInterfaces.Add(instance);
            @LeftHandPosition.started += instance.OnLeftHandPosition;
            @LeftHandPosition.performed += instance.OnLeftHandPosition;
            @LeftHandPosition.canceled += instance.OnLeftHandPosition;
            @LeftHandRotation.started += instance.OnLeftHandRotation;
            @LeftHandRotation.performed += instance.OnLeftHandRotation;
            @LeftHandRotation.canceled += instance.OnLeftHandRotation;
            @RightHandPosition.started += instance.OnRightHandPosition;
            @RightHandPosition.performed += instance.OnRightHandPosition;
            @RightHandPosition.canceled += instance.OnRightHandPosition;
            @RightHandRotation.started += instance.OnRightHandRotation;
            @RightHandRotation.performed += instance.OnRightHandRotation;
            @RightHandRotation.canceled += instance.OnRightHandRotation;
            @PrimarySpatialPointer.started += instance.OnPrimarySpatialPointer;
            @PrimarySpatialPointer.performed += instance.OnPrimarySpatialPointer;
            @PrimarySpatialPointer.canceled += instance.OnPrimarySpatialPointer;
            @FirstSpatialPointer.started += instance.OnFirstSpatialPointer;
            @FirstSpatialPointer.performed += instance.OnFirstSpatialPointer;
            @FirstSpatialPointer.canceled += instance.OnFirstSpatialPointer;
            @SecondSpatialPointer.started += instance.OnSecondSpatialPointer;
            @SecondSpatialPointer.performed += instance.OnSecondSpatialPointer;
            @SecondSpatialPointer.canceled += instance.OnSecondSpatialPointer;
        }

        private void UnregisterCallbacks(IVisionProVRActions instance)
        {
            @LeftHandPosition.started -= instance.OnLeftHandPosition;
            @LeftHandPosition.performed -= instance.OnLeftHandPosition;
            @LeftHandPosition.canceled -= instance.OnLeftHandPosition;
            @LeftHandRotation.started -= instance.OnLeftHandRotation;
            @LeftHandRotation.performed -= instance.OnLeftHandRotation;
            @LeftHandRotation.canceled -= instance.OnLeftHandRotation;
            @RightHandPosition.started -= instance.OnRightHandPosition;
            @RightHandPosition.performed -= instance.OnRightHandPosition;
            @RightHandPosition.canceled -= instance.OnRightHandPosition;
            @RightHandRotation.started -= instance.OnRightHandRotation;
            @RightHandRotation.performed -= instance.OnRightHandRotation;
            @RightHandRotation.canceled -= instance.OnRightHandRotation;
            @PrimarySpatialPointer.started -= instance.OnPrimarySpatialPointer;
            @PrimarySpatialPointer.performed -= instance.OnPrimarySpatialPointer;
            @PrimarySpatialPointer.canceled -= instance.OnPrimarySpatialPointer;
            @FirstSpatialPointer.started -= instance.OnFirstSpatialPointer;
            @FirstSpatialPointer.performed -= instance.OnFirstSpatialPointer;
            @FirstSpatialPointer.canceled -= instance.OnFirstSpatialPointer;
            @SecondSpatialPointer.started -= instance.OnSecondSpatialPointer;
            @SecondSpatialPointer.performed -= instance.OnSecondSpatialPointer;
            @SecondSpatialPointer.canceled -= instance.OnSecondSpatialPointer;
        }

        public void RemoveCallbacks(IVisionProVRActions instance)
        {
            if (m_Wrapper.m_VisionProVRActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IVisionProVRActions instance)
        {
            foreach (var item in m_Wrapper.m_VisionProVRActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_VisionProVRActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public VisionProVRActions @VisionProVR => new VisionProVRActions(this);
    public interface IVisionPro2DActions
    {
        void OnTouchTap(InputAction.CallbackContext context);
        void OnTouchPosition(InputAction.CallbackContext context);
    }
    public interface IVisionProVRActions
    {
        void OnLeftHandPosition(InputAction.CallbackContext context);
        void OnLeftHandRotation(InputAction.CallbackContext context);
        void OnRightHandPosition(InputAction.CallbackContext context);
        void OnRightHandRotation(InputAction.CallbackContext context);
        void OnPrimarySpatialPointer(InputAction.CallbackContext context);
        void OnFirstSpatialPointer(InputAction.CallbackContext context);
        void OnSecondSpatialPointer(InputAction.CallbackContext context);
    }
}
